package Simon;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.Locale;


public class Game {

    private final Color blueOff = new Color(47, 59, 77);
    private final Color blueOn = new Color(0, 0, 255);
    private final Color redOff = new Color(72, 36, 41);
    private final Color redOn = new Color(255, 0, 0);
    private final Color greenOff = new Color(41, 69, 39);
    private final Color greenOn = new Color(46, 255, 0);
    private final Color yellowOff = new Color(98, 97, 0);
    private final Color yellowOn = new Color(255, 255, 0);
    private JPanel MainPanel;
    private JPanel blue;
    private JPanel red;
    private JPanel green;
    private JPanel yellow;
    private JButton buttonRed;
    private JButton buttonBlue;
    private JButton buttonGreen;
    private JButton buttonYellow;
    private JButton playButton;
    private JTextField playField;
    private int score;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MainPanel = new JPanel();
        MainPanel.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        MainPanel.setBackground(new Color(-16777216));
        MainPanel.setForeground(new Color(-16777216));
        MainPanel.setMinimumSize(new Dimension(600, 600));
        MainPanel.setPreferredSize(new Dimension(600, 600));
        blue = new JPanel();
        blue.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 5, 5), -1, -1));
        blue.setBackground(new Color(-13681843));
        MainPanel.add(blue, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        blue.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        buttonBlue = new JButton();
        buttonBlue.setBackground(new Color(-13681843));
        buttonBlue.setForeground(new Color(-16776961));
        buttonBlue.setLabel("");
        buttonBlue.setText("");
        blue.add(buttonBlue, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        yellow = new JPanel();
        yellow.setLayout(new GridLayoutManager(1, 1, new Insets(5, 10, 10, 5), -1, -1));
        yellow.setBackground(new Color(-10329856));
        MainPanel.add(yellow, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        yellow.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        buttonYellow = new JButton();
        buttonYellow.setBackground(new Color(-10329856));
        buttonYellow.setText("");
        yellow.add(buttonYellow, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        red = new JPanel();
        red.setLayout(new GridLayoutManager(1, 1, new Insets(10, 5, 5, 10), -1, -1));
        red.setBackground(new Color(-12049367));
        MainPanel.add(red, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        red.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        buttonRed = new JButton();
        buttonRed.setBackground(new Color(-12049367));
        buttonRed.setText("");
        red.add(buttonRed, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        green = new JPanel();
        green.setLayout(new GridLayoutManager(1, 1, new Insets(5, 5, 10, 10), -1, -1));
        green.setBackground(new Color(-14072537));
        MainPanel.add(green, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        green.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        buttonGreen = new JButton();
        buttonGreen.setBackground(new Color(-14072537));
        buttonGreen.setText("");
        green.add(buttonGreen, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        playButton = new JButton();
        playButton.setText("jouer");
        playButton.setVisible(true);
        MainPanel.add(playButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        playField = new JTextField();
        playField.setEditable(false);
        Font playFieldFont = this.$$$getFont$$$("Comic Sans MS", -1, 24, playField.getFont());
        if (playFieldFont != null) playField.setFont(playFieldFont);
        playField.setText("à votre tour");
        playField.setVisible(false);
        MainPanel.add(playField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainPanel;
    }

    private enum Turn {user, game, lost, timeUp}

    private Turn turn;
    private Engine engine;
    private int gameCounter = 0;
    private int thresh;
    private int userCounter;
    private int switchTurn;
    private boolean isRunning;
    private static boolean soundsEnabled = true;


    /*
     * variables pour la difficulté
     */
    private enum Difficulty {facile, moyen, difficile}

    private Difficulty difficulty;
    private int tempo;
    private int userTempo;
    private int add;
    private boolean isTime;
    private Timer hurry;

//  <-- lignes de test


    public Game(String _difficulty) {

        engine = new Engine();
        score = 0;
        isRunning = false;

        difficulty = Difficulty.valueOf(_difficulty);
        switch (difficulty) {
            case facile: {
                isTime = false;
                break;
            }
            case moyen: {
                userTempo = 5000;
                isTime = true;
                break;
            }
            case difficile: {
                userTempo = 3000;
                isTime = true;
                break;
            }
        }
        hurry = new Timer(userTempo, null);
        userCounter = 0;
    }

    public void gameStop() {
        isRunning = false;
        removeListeners(buttonBlue); // retrait des listeners
        removeListeners(buttonGreen);
        removeListeners(buttonRed);
        removeListeners(buttonYellow);
        hurry.stop();
        engine.resetSequences();
        gameCounter = 0;
        thresh = 0;
        try {
            hurry.removeActionListener(hurry.getActionListeners()[0]);
        } catch (ArrayIndexOutOfBoundsException e) {

        }

    }

    public void startGame() { /*initialisation de la partie */
//        System.out.println("start game");
        turn = Turn.game;
        playButton.setVisible(true);
        for (int i = 0; i < 2; i++) {
            engine.addGameSequence();  /* ajout de deux boutons à la séquence en début de partie*/
        }

        /*
         * fonction test: vérification du tirage aléatoire
         */

//        int blue, green, red, yellow;
//        blue = green = red= yellow= 0;
//        for (int i = 0;i<12000;i++){
//            engine.addGameSequence();
//        }
//        for(int i = 0;i<engine.getGameSequence().size();i++){
//            String tmp =engine.getGameSequence().get(i).toString();
//            switch(tmp){
//                case "blue":
//                    blue++;
//                    break;
//                case "green":
//                    green++;
//                    break;
//                case "red":
//                    red++;
//                    break;
//                case "yellow":
//                    yellow++;
//                    break;
//
//            }
//        }
//        System.out.println("bleu :"+ blue);
//        System.out.println("vert :"+ green);
//        System.out.println("red :"+ red);
//        System.out.println("yellow :"+ yellow);
    }

    /*
     * envoi du score pour vérification nouveau high score
     */
    public void setScore() {
        try {
            HighScore highScore = new HighScore();
            highScore.setScore(score, difficulty.name());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }

    /*
     * réinitialisation du jeu
     */

    public void restartGame() {
//        System.out.println("restart game");

        if (turn == Turn.lost) {
            JOptionPane.showMessageDialog(null, "perdu");
            setScore();
        } else if (turn == Turn.timeUp) {
            setScore();
        }
        removeListeners(buttonBlue); // retrait des listeners
        removeListeners(buttonGreen);
        removeListeners(buttonRed);
        removeListeners(buttonYellow);
        engine.resetSequences();
        gameCounter = 0;
        thresh = 0;
        playButton.setVisible(true);
        score = 0;
        turn = Turn.game;
        for (int i = 0; i < 2; i++) {
            engine.addGameSequence();  // ajout de deux boutons à la séquence en début de partie
        }

    }

    /*
     * séquence utilisateur réussie
     */

    public void win() {
        score++;
//        System.out.println("score : " + score);
        Timer t = new Timer(1000, null);
        switchTurn = 0;
        t.setRepeats(true);
        t.start();
        t.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (switchTurn == 0) { /* séquence entre le tour utilisateur et le tour modèle étape 1 */

                    turn = Turn.game;
                    playField.setText("bien joué!");
                    playField.setVisible(true);
                    MainPanel.updateUI();
                    switchTurn++;
                } else if (switchTurn == 1) {  /* séquence entre le tour utilisateur et le tour modèle étape 2 */
                    switchTurn = 0;
                    playField.setVisible(false);
                    MainPanel.updateUI();
                    gameTurn();
                    t.stop();
                }

            }
        });

    }

    public void userProcess(String color) { //fonction d'analyse des coups du joueur
        if (userCounter < engine.getGameSequence().size() && isRunning) { //vérifier si l'utilisateur à encore des coups à jouer
//                    System.out.println("blue : usercounter < longeur sequence jeu");
            if (engine.addUserSequence(color, userCounter)) { // vérifier si le bouton est correct
                lightButton(color);
                if (isTime) {
                    hurry.restart();
                }
                if (userCounter == (engine.getGameSequence().size() - 1)) { // vérifier si dernier coup joué
                    win();
//                    System.out.println("win");
                    if (isTime) {
                        hurry.stop();
                        hurry.removeActionListener(hurry.getActionListeners()[0]);
                    }
                } else
                    userCounter++;
            } else { // bouton incorrect
                isRunning = false;
                if (isTime) {
                    hurry.removeActionListener(hurry.getActionListeners()[0]);
                    hurry.stop();
                }
                turn = Turn.lost;
                playButton.setVisible(true);
                playButton.setText("rejouer");
                restartGame();

            }
        }
    }

    public void userTurn() { // tour du joueur
//        System.out.println("user turn");

        tempo = 1000;
        removeListeners(buttonBlue); // retrait des listeners du tour précédent
        removeListeners(buttonGreen);
        removeListeners(buttonRed);
        removeListeners(buttonYellow);
        userCounter = 0;
//        System.out.println("userTurn activé");
        engine.getUserSequence().clear();

        if (isTime && isRunning) {
            hurry.setRepeats(false);
            hurry.start();
            hurry.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    turn = Turn.timeUp;
                    playButton.setVisible(true);
                    playButton.setText("rejouer");
                    isRunning = false;
                    restartGame();
                    JOptionPane.showMessageDialog(null, "perdu, temps écoulé");
                }
            });
        }

//        for(int i = 0;i<engine.getUserSequence().size();i++){
//            System.out.println("sequence user: "+engine.getUserSequence().get(i).toString());
//        }

        buttonBlue.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                userProcess("blue");

            }
        });

        buttonGreen.addActionListener((new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                userProcess("green");
            }
        }));
        buttonRed.addActionListener((new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                userProcess("red");
            }
        }));
        buttonYellow.addActionListener((new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
//                System.out.println("yellow : usercounter < longeur sequence jeu");
                userProcess("yellow");

            }
        }));
    }


    public void setLightsOff() {
        buttonBlue.setBackground(blueOff);
        buttonGreen.setBackground(greenOff);
        buttonRed.setBackground(redOff);
        buttonYellow.setBackground(yellowOff);
    }

    /*
     * sequence modèle */

    public void gameTurn() {
//        System.out.println("gameTurn activé");
        isRunning = true;
        switch (difficulty) {
            case facile: {
//                System.out.println("facile choisi");
                tempo = 1000;
                add = 1;
                break;
            }
            case moyen: {
//                System.out.println("moyen choisi");
                tempo = 800;
                add = 1;
                break;
            }
            case difficile: {
                tempo = 600;
                add = 2;
                break;
            }
        }
        switchTurn = 0;

        for (int i = 0; i < add; i++) { /* ajout d'un ou deux boutons à la sequence selon la difficulté*/
            engine.addGameSequence();
        }
        gameCounter = 0;

        thresh = engine.getGameSequence().size();

        /*
         * fonction test: affichage de la séquence modèle
         */
//        for(int i=0;i<thresh;i++){
//            System.out.println(engine.getGameSequence().get(i).toString());
//        }
//        System.out.println("thresh :"+ thresh);
//        System.out.println(engine.getGameSequence().size());


        Timer timer = new Timer(tempo, null); /*timer déclenchant la fonction d'allumage du bouton*/
        timer.setRepeats(true);

        timer.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
//                System.out.println("timer listener activé");
                if (gameCounter < thresh) {
//                    System.out.println("if gameCounter activé");
                    lightButton(engine.getGameSequence().get(gameCounter).toString());
                    gameCounter++;
                } else {
                    if (switchTurn == 0) {  /* séquence entre le tour modèle et le tour utilisateur - étape 1 */
                        turn = Turn.user;
                        switchTurn++;
                        playField.setText("à votre tour");
                        playField.setVisible(true);
                        MainPanel.updateUI();
                    } else if (switchTurn == 1) {  /* séquence entre le tour modèle et le tour utilisateur - étape 2 */
//                    System.out.println("else waiting activé");
                        timer.stop();
                        switchTurn = 0;
                        playField.setVisible(false);
                        MainPanel.updateUI();
                        userTurn();
                    }
                }

            }
        });

        if (isRunning) {
            timer.start();
        }

    }

    /*
     * sequence allumage-extinction des boutons
     */

    public void lightButton(String buttonColor) {
//        System.out.println("lightbutton activé");

        Timer t = new Timer(tempo / 2, null); /* timer d'extinction du bouton */

//        System.out.println("tempo lightbutton : "+ (tempo/2));
        t.setRepeats(false);

        if (buttonColor == "blue") {
            if (soundsEnabled) {
                Sound sound = new Sound("resources/beep1.wav");
            }
            buttonBlue.setBackground(blueOn);
            t.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
//                    System.out.println("t blue activé");
                    buttonBlue.setBackground(blueOff);
                    t.stop();
                }
            });
            t.start();

        } else if (buttonColor.equals("green")) {
            if (soundsEnabled) {
                Sound sound = new Sound("resources/beep2.wav");
            }
            buttonGreen.setBackground(greenOn);

            t.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
//                    System.out.println("t green activé");
                    buttonGreen.setBackground(greenOff);
                    t.stop();
                }
            });
            t.start();

        } else if (buttonColor.equals("red")) {
            if (soundsEnabled) {
                Sound sound = new Sound("resources/beep3.wav");
            }
            buttonRed.setBackground(redOn);

            t.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
//                    System.out.println("t red activé");
                    buttonRed.setBackground(redOff);
                    t.stop();
                }
            });
            t.start();

        } else if (buttonColor.equals("yellow")) {
            if (soundsEnabled) {
                Sound sound = new Sound("resources/beep4.wav");
            }
            buttonYellow.setBackground(yellowOn);


            t.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
//                    System.out.println("t yellow activé");
                    buttonYellow.setBackground(yellowOff);
                    t.stop();
                }
            });
            t.start();

        }

    }

    public void removeListeners(JButton button) {
        for (ActionListener al : button.getActionListeners()) {
            button.removeActionListener(al);
        }
    }

    public void setRunning(boolean running) {
        isRunning = running;
    }

    public JButton getButtonRed() {
        return buttonRed;
    }

    public JButton getButtonBlue() {
        return buttonBlue;
    }

    public JButton getButtonGreen() {
        return buttonGreen;
    }

    public JButton getButtonYellow() {
        return buttonYellow;
    }

    public JButton getPlayButton() {
        return playButton;
    }

    public String getTurn() {
        return turn.toString();
    }

    public static void setSoundsEnabled(boolean soundsEnabled) {
        Game.soundsEnabled = soundsEnabled;
    }

    public static boolean isSoundsEnabled() {
        return soundsEnabled;
    }

    public JPanel getMainPanel() {
        return MainPanel;
    }
}
